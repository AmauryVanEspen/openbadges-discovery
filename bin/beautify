#!/usr/bin/env node

var beautify = require('js-beautify');
var file = require('file');
var path = require('path');
var fs = require('fs');

var opts = require('minimist')(process.argv.slice(2), {
  alias: {
    'help': 'h',
    'verbose': 'v',
    'warn': 'w'
  }
});

if (opts.help) {
  console.log("Usage: %s [options]", path.basename(process.argv[1]));
  console.log();
  console.log("Options:");
  console.log("  -h, --help     Output usage information");
  console.log("  -v, --verbose  Enable verbose output");
  console.log("  -w, --warn     Print warnings but return success");
  console.log("  -!             Edit files in place");
  process.exit(0);
}

const EDIT = opts['!'];
const VERBOSE = opts.verbose;
const WARN = opts.warn;

var config = JSON.parse(fs.readFileSync(path.join(__dirname, '../.jsbeautifyrc')));
if (VERBOSE) console.log(".jsbeautifyrc config:\n%s\n", JSON.stringify(config, null, '  '));


var ugly = 0;

var srcDirs = ['app', 'clientapp', 'tests'];
srcDirs.forEach(function (dir) {
  file.walkSync(path.join(__dirname, '..', dir), function (dirPath, dirs, files) {
    files.forEach(function (file) {
      var filePath = path.join(dirPath, file);
      if (['.js', '.html'].indexOf(path.extname(file)) !== -1) {
        var type = path.extname(file).slice(1);
        var contents = fs.readFileSync(filePath, {encoding: 'utf-8'});
        var beautiful = beautify[type](contents, config);
        if (beautiful.trim() !== contents.trim()) {
          if (VERBOSE) console.log(file, 'can be beautified');
          ugly++;
          if (EDIT) {
            fs.writeFileSync(filePath, beautiful);
            fs.writeFileSync('a.txt', contents);
            fs.writeFileSync('b.txt', beautiful);
          }
        }
      }
    });
  });
});

console.log("%s%d files %s beautified.", VERBOSE ? "\n" : "", ugly, EDIT ? "were" : "can be");
if (!EDIT) console.log("Run `%s -!` to beautify files in place.", path.relative(process.cwd(), process.argv[1]));

process.exit(WARN ? 0 : ugly);